/* Generate relative date/time test data with the following dimensions:

   1. locale
   2. numberingSystem
   3. style
   4. numeric
   5. unit, e.g., 'day'
   6. value: in the range of min to max
*/

// Set up Node version to generate data specific to ICU/CLDR version
// e.g., `nvm install 21.6.0;nvm use 21.6.0` (ICU 74)

const gen_hash = require("./generate_test_hash.js");

const fs = require('node:fs');

const debug = false;

// Add numbering system to the test options
const numbering_systems = [null, 'latn', 'arab', 'beng', 'adlm']

const locales = [
  'en-US', 'en-GB',
  'zh-TW', 'vi', 'el', 'mt-MT',
  'bn', 'zu',
  'und'];

const spec_options = [null,
                      {'style': 'long'},
                      {'style': 'short'},
                      {'style': 'narrow'},
                     ];

const units = ['second',
               'minute',
               'hour',
               'day',
               'week',
               'month',
               'quarter',
               'year'
              ];

const numeric = ['auto', 'always'];

const counts = [-100, -4, -2, -1, 0, 1, 1.3, 2, 3, 4, 10];

function generateAll() {

  let test_obj = {
    'Test scenario': 'rdt_fmt',
    'test_type': 'rdt_fmt',
    'description': 'relative date/time format test data generated by Node',
    'platformVersion': process.version,
    'icuVersion': process.versions.icu,
    'cldrVersion': process.versions.cldr
  };

  let test_cases = [];

  let verify_obj = {
    'test_type': test_obj['test_type'],
    'description': test_obj['description'],
    'platformVersion': process.version,
    'icuVersion': process.versions.icu,
    'cldrVersion': process.versions.cldr
  }
  let verify_cases = [];

  let label_num = 0;

  const expected_count = locales.length *
        numbering_systems.length *
        spec_options.length *
        counts.length *
        units.length;

  console.log("Generating ", expected_count, " rdt tests for ",
              process.versions.icu);

  for (const locale of locales) {

    for (const number_system of numbering_systems) {

      for (const option of spec_options) {

        // Create format object with these options

        let all_options = {};
        if (option) {
          all_options = {...option};
        }
        if (number_system) {
          all_options['numberingSystem'] = number_system;
        }

        let formatter;
        try {
          formatter = new Intl.RelativeTimeFormat(locale, all_options);
        } catch (error) {
          console.log(error, ' with locale ',
                      locale, ' and options: ', all_options);
          continue;
        }

        if (debug) {
          console.log("resolved options: ", formatter.resolvedOptions());
        }

        for (const unit of units) {

          for (const count of counts) {
            try {
              result = formatter.format(count, unit);
            } catch (error) {
              console.log('FORMATTER CREATION FAILS! ', error);
            }

            const label_string = String(label_num);

            // Without label
            let test_case = {
              'unit': unit,
              'count': String(count),
            };

            if (locale != '') {
              test_case["locale"] = locale;
            }

            if (all_options != null) {
              test_case["options"] = {...all_options};
            }

            if (debug) {
              console.log("TEST CASE :", test_case);
            }

            gen_hash.generate_hash_for_test(test_case);
            test_case['label'] = label_string;

            test_cases.push(test_case);

            // Generate what we get.
            try {
              verify_cases.push({'label': label_string,
                                 'verify': result});
              if (debug) {
                console.log('   expected = ', result);
              }
            } catch (error) {
              console.log('!!! error ', error, ' in label ', label_num,
                          ' for date = ', d);
            }
            label_num ++;
          }
        }
      }
    }
  }


  console.log('Number of relative date/time tests generated for ',
              process.versions.icu, ': ', label_num);

  test_obj['tests'] = test_cases;
  try {
    fs.writeFileSync('rdt_fmt_test.json', JSON.stringify(test_obj, null));
    // file written successfully
  } catch (err) {
    console.error(err);
  }

  verify_obj['verifications'] = verify_cases;
  try {
    fs.writeFileSync('rdt_fmt_verify.json', JSON.stringify(verify_obj, null, 2));
    // file written successfully
  } catch (err) {
    console.error(err);
  }
}

/* Call the generator */
generateAll();
